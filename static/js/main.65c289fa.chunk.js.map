{"version":3,"sources":["Timer.tsx","usePrevious.tsx","Theme.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","resetTimerButton","flexGrow","flex","textTransform","bar","height","spacing","transition","fullWidth","failed","backgroundColor","Timer","props","React","useState","startTime","remainingTime","setRemainingTime","started","setStarted","previousStartTime","value","ref","useRef","useEffect","current","usePrevious","classes","timer","setTimeout","initialDelay","clearTimeout","maxTime","mixValue","red","Math","floor","green","colorStyle","color","progressBarStyle","width","Card","elevation","className","undefined","Button","onClick","CardContent","Typography","style","gutterBottom","name","variant","Box","createStyles","root","timerContainer","padding","margin","textAlign","settingsContainer","drawer","createMuiTheme","palette","type","primary","main","minStartTime","maxStartTime","initialTimers","split","map","timerName","index","random","key","WithTheme","open","setOpen","setMaxTime","setMinStartTime","timers","setTimers","ThemeProvider","CssBaseline","AppBar","position","Toolbar","IconButton","edge","Drawer","Divider","Grid","container","xs","item","TextField","label","onChange","e","parseInt","target","Number","isInteger","InputProps","inputProps","min","max","newTimers","t","i","updateTimerName","splice","removeTimer","fontSize","Fab","aria-label","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65c289fa.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Box, Button, Typography } from \"@material-ui/core\";\nimport { Theme, makeStyles } from \"@material-ui/core/styles\";\nimport { usePrevious } from \"./usePrevious\";\n\nexport type TimerProps = {\n  name: string;\n  startTime: number;\n  initialDelay: number;\n  maxTime: number;\n  key: number;\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  resetTimerButton: {\n    flexGrow: 1,\n    flex: 1,\n    textTransform: \"unset\",\n  },\n  bar: {\n    height: theme.spacing(1),\n    transition: \"width 500ms ease-in-out\",\n  },\n  fullWidth: {\n    flexGrow: 1,\n  },\n  failed: {\n    backgroundColor: \"red\",\n  },\n}));\n\nexport default function Timer(props: TimerProps) {\n  const [remainingTime, setRemainingTime] = React.useState(props.startTime);\n  const [started, setStarted] = React.useState(true);\n  const previousStartTime = usePrevious<number>(props.startTime);\n\n  const classes = useStyles();\n  const resetTimer = () => {\n    setRemainingTime(props.maxTime);\n  };\n  const next = () => {\n    if (remainingTime > 0) {\n      setRemainingTime(remainingTime - 1);\n    }\n    if (!started) {\n      setStarted(true);\n    }\n  };\n  React.useEffect(() => {\n    const timer = setTimeout(\n      () => {\n        next();\n      },\n      started ? 1000 : props.initialDelay\n    );\n    return () => clearTimeout(timer);\n  });\n\n  React.useEffect(() => {\n    if (previousStartTime !== props.startTime && started) {\n      setRemainingTime(props.startTime);\n    }\n  }, [previousStartTime, props.startTime, props.maxTime, started]);\n\n  const failed = remainingTime === 0;\n\n  const mixValue = remainingTime / props.maxTime;\n  const red = 255 - Math.floor(255 * mixValue);\n  const green = Math.floor(255 * mixValue);\n  const percent = mixValue * 100;\n\n  const colorStyle = {\n    color: failed ? \"unset\" : \"rgb(\" + red + \", \" + green + \", 0)\",\n  };\n\n  const progressBarStyle = {\n    width: percent + \"%\",\n    backgroundColor: colorStyle.color,\n  };\n\n  return (\n    <Card\n      elevation={10}\n      className={remainingTime === 0 ? classes.failed : undefined}\n    >\n      <Button\n        onClick={resetTimer}\n        className={classes.resetTimerButton}\n        fullWidth\n      >\n        <CardContent className={classes.fullWidth}>\n          <Typography style={colorStyle} color=\"textSecondary\" gutterBottom>\n            {props.name}\n          </Typography>\n          <Typography variant=\"h2\">{remainingTime}s</Typography>\n          <Box className={classes.bar} style={progressBarStyle}>\n            {\" \"}\n          </Box>\n        </CardContent>\n      </Button>\n    </Card>\n  );\n}\n","import { useEffect, useRef } from \"react\";\n\nexport const usePrevious = <T extends unknown>(value: T): T | undefined => {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n","import React from \"react\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport {\n  Drawer,\n  AppBar,\n  Toolbar,\n  IconButton,\n  Button,\n  Box,\n  Grid,\n  CssBaseline,\n  TextField,\n  Fab,\n  Divider,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Timer, { TimerProps } from \"./Timer\";\nimport { green } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    timerContainer: {\n      padding: theme.spacing(2),\n      margin: theme.spacing(0),\n      textAlign: \"center\",\n    },\n    settingsContainer: {\n      padding: theme.spacing(2),\n      margin: theme.spacing(0),\n      textAlign: \"center\",\n    },\n    drawer: {\n      padding: theme.spacing(2),\n    },\n  })\n);\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: green[900],\n    },\n  },\n});\n\nfunction getInitialTimers(minStartTime: number, maxStartTime: number) {\n  const timers = \"Air Bat Cap Drum Each Fine Gust Harp Sit Jury Krunch Look Made Near Odd Pit Quench Red Sun Trap\".split(\n    \" \"\n  );\n  return timers.map((timerName, index) => ({\n    name: timerName,\n    startTime: Math.floor(\n      Math.random() * (maxStartTime - minStartTime) + minStartTime\n    ),\n    initialDelay: Math.floor(Math.random() * 1000),\n    maxTime: 60,\n    key: index,\n  }));\n}\n\nconst initialTimers = getInitialTimers(40, 60);\n\nfunction WithTheme() {\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [maxTime, setMaxTime] = React.useState<number>(60);\n  const [minStartTime, setMinStartTime] = React.useState<number>(40);\n  const [timers, setTimers] = React.useState<Array<TimerProps>>(initialTimers);\n  const classes = useStyles(theme);\n\n  const openDrawer = () => {\n    setOpen(true);\n  };\n\n  const closeDrawer = () => {\n    setOpen(false);\n  };\n\n  const updateMaxTime = (e: any) => {\n    const value = parseInt(e.target.value, 10);\n    if(Number.isInteger(value)) {\n      setMaxTime(value);\n    } else {\n      setMaxTime(0);\n    }\n  };\n  const updateMinTime = (e: any) => {\n    const value = parseInt(e.target.value, 10);\n    if(Number.isInteger(value)) {\n      setMinStartTime(value);\n    } else {\n      setMinStartTime(0);\n    }\n  };\n\n  const resetTimers = () => {\n    const newTimers = timers.map((t) => ({\n      ...t,\n      startTime:\n        Math.floor(Math.random() * (maxTime - minStartTime)) + minStartTime,\n      maxTime: maxTime,\n    }));\n    setTimers(newTimers);\n  };\n  const removeTimer = (i: number) => {\n    const newTimers = [...timers];\n    newTimers.splice(i, 1);\n    setTimers(newTimers);\n  };\n\n  const updateTimerName = (i: number, e: any) => {\n    setTimers(\n      timers.map((timer, index) => {\n        if (index === i) {\n          return {\n            ...timer,\n            name: e.target.value,\n          };\n        } else {\n          return timer;\n        }\n      })\n    );\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Box>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton onClick={openDrawer} edge=\"start\">\n              <MenuIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Drawer variant=\"persistent\" open={open}>\n          <Box className={classes.drawer}>\n            <IconButton onClick={closeDrawer} edge=\"start\">\n              <ChevronLeftIcon />\n            </IconButton>\n            <Divider />\n            <Grid container xs={12} spacing={2}>\n              <Grid item xs={12} className={classes.settingsContainer}>\n                <TextField\n                  label=\"Max Time (s)\"\n                  type=\"number\"\n                  variant=\"outlined\"\n                  value={maxTime}\n                  onChange={updateMaxTime}\n                  InputProps={{ inputProps: { min: minStartTime ?? 0 } }}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.settingsContainer}>\n                <TextField\n                  label=\"Min Time (s)\"\n                  type=\"number\"\n                  variant=\"outlined\"\n                  value={minStartTime}\n                  InputProps={{ inputProps: { max: maxTime ?? 100 } }}\n                  onChange={updateMinTime}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Button onClick={resetTimers} variant=\"outlined\" fullWidth>\n                  Reset Timers\n                </Button>\n              </Grid>\n            </Grid>\n            {timers.map((timer, i) => (\n              <Grid\n                item\n                xs={12}\n                key={timer.key}\n                className={classes.settingsContainer}\n              >\n                <TextField\n                  label={\"Name \" + i}\n                  type=\"text\"\n                  variant=\"outlined\"\n                  value={timer.name}\n                  onChange={(e) => updateTimerName(i, e)}\n                  fullWidth\n                />\n                <IconButton onClick={() => removeTimer(i)}>\n                  <DeleteIcon fontSize=\"large\" />\n                </IconButton>\n              </Grid>\n            ))}\n            <Fab color=\"primary\" aria-label=\"add\">\n              <AddIcon />\n            </Fab>\n          </Box>\n        </Drawer>\n        <main>\n          <Grid\n            container\n            spacing={4}\n            xs={12}\n            className={classes.timerContainer}\n          >\n            {timers.map((timer) => (\n              <Grid item key={timer.key} xs={3}>\n                <Timer\n                  key={timer.key}\n                  name={timer.name}\n                  startTime={timer.startTime}\n                  initialDelay={timer.initialDelay}\n                  maxTime={maxTime}\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </main>\n      </Box>\n    </ThemeProvider>\n  );\n}\nexport default WithTheme;\n","import React from \"react\";\nimport \"./App.css\";\nimport WithTheme from \"./Theme\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <WithTheme />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}